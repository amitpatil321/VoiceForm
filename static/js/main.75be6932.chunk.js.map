{"version":3,"sources":["MakeForm/MakeFormView.js","FormDetailsModal/FormDetailsModal.js","App.js","serviceWorker.js","index.js"],"names":["MakeForm","fields","formData","refs","_handleChange","_setActiveInput","_handleSubmit","map","each","index","Item","key","placeholder","name","ref","onChange","onFocus","onBlur","value","autoComplete","className","type","onClick","FormDetailsModal","showModal","_hideModal","title","visible","onOk","onCancel","footer","width","recorder","window","SpeechRecognition","webkitSpeechRecognition","continous","interimResults","lang","App","state","recordedString","activeInput","isRecording","loading","forceStopped","inputHistory","debugMode","_proccessCommand","_onDebugModeChange","setState","prevState","clearFields","forEach","currText","replace","length","pop","_stopRecording","input","find","triggers","includes","_findRefInput","current","focus","existingValue","refArray","inputName","props","_startRecording","start","onstart","onresult","event","results","isFinal","string","transcript","onend","stop","e","target","inputs","this","React","createRef","span","checked","checkedChildren","unCheckedChildren","indicator","style","fontSize","spin","Component","hot","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75be6932.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\n\r\nconst MakeForm = ({\r\n  fields,\r\n  formData,\r\n  refs,\r\n  _handleChange,\r\n  _setActiveInput,\r\n  _handleSubmit\r\n}) => {\r\n  return (\r\n    <Form>\r\n      {fields.map((each, index) => {\r\n        return (\r\n          <Form.Item key={index}>\r\n            <Input\r\n              placeholder={each.placeholder}\r\n              name={each.name}\r\n              ref={refs[index]}\r\n              onChange={_handleChange}\r\n              onFocus={() => _setActiveInput(each.name)}\r\n              onBlur={() => _setActiveInput(null)}\r\n              value={formData[each.name]}\r\n              autoComplete=\"off\"\r\n            />\r\n          </Form.Item>\r\n        );\r\n      })}\r\n      <Form.Item className=\"center\">\r\n        <Button type=\"primary\" onClick={_handleSubmit}>\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default MakeForm;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\n\r\nconst FormDetailsModal = ({ showModal, formData, fields, _hideModal }) => {\r\n  return (\r\n    <Modal\r\n      title=\"User Details\"\r\n      visible={showModal}\r\n      onOk={_hideModal}\r\n      onCancel={_hideModal}\r\n      footer={[\r\n        <Button key=\"back\" onClick={_hideModal}>\r\n          Close\r\n        </Button>\r\n      ]}\r\n    >\r\n      <table>\r\n        <tbody>\r\n          {formData &&\r\n            showModal &&\r\n            fields.map(each => {\r\n              return (\r\n                <tr key={each.name}>\r\n                  <td width=\"50%\">{each.placeholder}</td>\r\n                  <td>: {formData[each.name]}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FormDetailsModal;\r\n","import { hot } from \"react-hot-loader/root\";\r\nimport React, { Component } from \"react\";\r\nimport { Row, Col, Switch, Spin, Icon } from \"antd\";\r\nimport { FaMicrophone, FaMicrophoneSlash } from \"react-icons/fa\";\r\n\r\nimport { fields } from \"./form.json\";\r\nimport MakeForm from \"./MakeForm/MakeFormView\";\r\nimport \"./App.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport FormDetailsModal from \"./FormDetailsModal/FormDetailsModal.js\";\r\n\r\nconst SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst recorder = new SpeechRecognition();\r\n\r\nrecorder.continous = true;\r\nrecorder.interimResults = true;\r\nrecorder.lang = \"en-US\";\r\n\r\n/* TODO :\r\n1) Add action to clear form - DONE\r\n2) Clear perticular field only - DONE\r\n3) Append new string with existing input text - DONE\r\n4) Add undo feature - DONE\r\n5) keybord delete button isnt working\r\n */\r\n\r\nclass App extends Component {\r\n  state = {\r\n    recordedString: null,\r\n    activeInput: null,\r\n    isRecording: false,\r\n    loading: false,\r\n    forceStopped: false,\r\n    formData: [],\r\n    inputHistory: [],\r\n    showModal: false,\r\n    debugMode: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    let inputs = {};\r\n    let inputHistory = {};\r\n\r\n    // Initialize inputs array with blank values\r\n    fields.forEach(each => {\r\n      inputs[each.name] = \"\";\r\n      inputHistory[each.name] = \"\";\r\n    });\r\n\r\n    this.refs = fields.map(each => (each.ref = React.createRef()));\r\n    this.setState({ formData: inputs, inputHistory });\r\n  }\r\n\r\n  _proccessCommand = recordedString => {\r\n    let { activeInput, formData, inputHistory } = this.state;\r\n    // check if command matched with any other custom command\r\n    switch (recordedString) {\r\n      // toggle debug mode on or off\r\n      case \"toggle debug\":\r\n        this._onDebugModeChange();\r\n        break;\r\n      // Appends space at the end of input\r\n      case \"space\":\r\n        if (activeInput) {\r\n          formData[activeInput] = formData[activeInput] + \" \";\r\n          this.setState(prevState => ({\r\n            ...formData,\r\n            inputHistory: {\r\n              ...prevState.inputHistory,\r\n              [activeInput]: [...prevState.inputHistory[activeInput], \" \"]\r\n            }\r\n          }));\r\n        }\r\n        break;\r\n      // Clears currently active input element\r\n      case \"clear\":\r\n      case \"clear input\":\r\n      case \"clear field\":\r\n      case \"start again\":\r\n        if (activeInput) {\r\n          formData[activeInput] = \"\";\r\n          this.setState({ ...formData });\r\n        }\r\n        break;\r\n      // Resets form by clearing all the input fields\r\n      case \"reset\":\r\n      case \"reset form\":\r\n      case \"clear form\":\r\n        let clearFields = {};\r\n        fields.forEach(each => {\r\n          clearFields[each.name] = \"\";\r\n        });\r\n        this.setState({ formData: clearFields });\r\n        break;\r\n      // Deletes last string added to active input\r\n      case \"undo\":\r\n        if (activeInput) {\r\n          let currText = formData[activeInput];\r\n          if (currText) {\r\n            currText = currText.replace(\r\n              inputHistory[activeInput][inputHistory[activeInput].length - 1] +\r\n                \" \",\r\n              \"\"\r\n            );\r\n            formData[activeInput] = currText;\r\n            // set updated input\r\n            this.setState({ ...formData });\r\n            // remove that word from history as well.\r\n            inputHistory[activeInput].pop();\r\n          }\r\n        }\r\n        break;\r\n      // Submits form\r\n      case \"go\":\r\n      case \"submit\":\r\n      case \"submit form\":\r\n        this._handleSubmit();\r\n        break;\r\n      // Stops recording/listening to user commands\r\n      case \"stop recording\":\r\n      case \"stop listening\":\r\n        this._stopRecording();\r\n        break;\r\n      // process text which doesnt match with any other custom commands\r\n      default: {\r\n        // Map command with input triggers if any\r\n        let input = fields.find(each => each.triggers.includes(recordedString));\r\n        if (input) {\r\n          // if any active input is there then fill it with value\r\n          // set input active\r\n          this._findRefInput(this.refs, input.name).current.focus();\r\n          this.setState({ activeInput: input.name });\r\n        } else {\r\n          if (activeInput) {\r\n            const existingValue = formData[activeInput];\r\n            formData[activeInput] =\r\n              (existingValue ? existingValue : \"\") + recordedString + \" \";\r\n            this.setState(prevState => ({\r\n              ...formData,\r\n              inputHistory: {\r\n                ...prevState.inputHistory,\r\n                [activeInput]: [\r\n                  ...prevState.inputHistory[activeInput],\r\n                  recordedString\r\n                ]\r\n              }\r\n            }));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Find referened input\r\n  _findRefInput = (refArray, inputName) =>\r\n    refArray.find(each => each.current.props.name === inputName);\r\n\r\n  // Start audio recording\r\n  _startRecording = () => {\r\n    recorder.start();\r\n    recorder.onstart = () =>\r\n      this.setState({ isRecording: true, forceStopped: false });\r\n    recorder.onresult = event => {\r\n      if (event.results[0].isFinal) {\r\n        let string = event.results[0][0].transcript;\r\n        if (string.length) {\r\n          this.setState({ recordedString: string, loading: true });\r\n          this._proccessCommand(string);\r\n        }\r\n      } else this.setState({ recordedString: null, loading: true });\r\n    };\r\n    // Start listening again on end\r\n    recorder.onend = () => {\r\n      let { forceStopped } = this.state;\r\n      if (!forceStopped) recorder.start();\r\n      this.setState({ isRecording: false, loading: false });\r\n    };\r\n  };\r\n\r\n  // stop recording\r\n  _stopRecording = () => {\r\n    this.setState(\r\n      {\r\n        activeInput: null,\r\n        isRecording: false,\r\n        forceStopped: true,\r\n        loading: true\r\n      },\r\n      () => recorder.stop()\r\n    );\r\n  };\r\n\r\n  // Handle submit button\r\n  _handleSubmit = e => this.setState({ showModal: true });\r\n\r\n  // Handle input change\r\n  _handleChange = e => {\r\n    const { formData } = this.state;\r\n    this.setState({\r\n      formData: { ...formData, [e.target.name]: e.target.value }\r\n    });\r\n  };\r\n\r\n  // Debug mode change\r\n  _onDebugModeChange = () => {\r\n    const { debugMode } = this.state;\r\n    this.setState({ debugMode: !debugMode });\r\n  };\r\n\r\n  // set currently ative input\r\n  _setActiveInput = activeInput => this.setState({ activeInput });\r\n\r\n  // toggle modal\r\n  _hideModal = () => this.setState({ showModal: false });\r\n\r\n  render() {\r\n    let {\r\n      isRecording,\r\n      loading,\r\n      formData,\r\n      showModal,\r\n      debugMode,\r\n      recordedString\r\n    } = this.state;\r\n    return (\r\n      <Row>\r\n        <Col span={24}>\r\n          <Row>\r\n            <Col span={8}></Col>\r\n            <Col span={8} className=\"form\">\r\n              <div className=\"align-right\">\r\n                Debug Mode{\" \"}\r\n                <Switch\r\n                  checked={debugMode ? true : false}\r\n                  checkedChildren=\"on\"\r\n                  unCheckedChildren=\"off\"\r\n                  onChange={this._onDebugModeChange}\r\n                />\r\n              </div>\r\n              <h2>Registration Form</h2>\r\n              <Row>\r\n                <Col span={24}>\r\n                  <Row>\r\n                    <Col span={2}>\r\n                      {!isRecording ? (\r\n                        <FaMicrophone\r\n                          className=\"recordingIcon on\"\r\n                          onClick={() => this._startRecording()}\r\n                        />\r\n                      ) : (\r\n                        <FaMicrophoneSlash\r\n                          className=\"recordingIcon off\"\r\n                          onClick={() => this._stopRecording()}\r\n                        />\r\n                      )}\r\n                    </Col>\r\n                    <Col span={8}></Col>\r\n                    <Col span={14} className=\"align-right\">\r\n                      {loading && (\r\n                        <Spin\r\n                          indicator={\r\n                            <Icon\r\n                              type=\"loading\"\r\n                              style={{ fontSize: 18 }}\r\n                              spin\r\n                            />\r\n                          }\r\n                        />\r\n                      )}\r\n                      {debugMode && recordedString && (\r\n                        <span className=\"debug\">{recordedString}</span>\r\n                      )}\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n              {/* <br /> */}\r\n              <MakeForm\r\n                fields={fields}\r\n                formData={formData}\r\n                refs={this.refs}\r\n                _handleChange={this._handleChange}\r\n                _setActiveInput={this._setActiveInput}\r\n                _handleSubmit={this._handleSubmit}\r\n              />\r\n            </Col>\r\n            <Col span={8}></Col>\r\n          </Row>\r\n        </Col>\r\n        <FormDetailsModal\r\n          showModal={showModal}\r\n          formData={formData}\r\n          fields={fields}\r\n          _hideModal={this._hideModal}\r\n        />\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}