{"version":3,"sources":["MakeForm/MakeFormView.js","Help/Help.js","FormDetailsModal/FormDetailsModal.js","App.js","serviceWorker.js","index.js"],"names":["MakeForm","fields","formData","refs","_handleChange","_setActiveInput","_handleSubmit","map","each","index","Item","key","name","placeholder","ref","onChange","onFocus","onBlur","value","autoComplete","className","type","onClick","defaultProps","Help","dataSource","desc","forEach","push","command","e","Math","random","Description","style","width","fontSize","target","rel","href","columns","title","dataIndex","size","pagination","FormDetailsModal","showModal","_hideModal","visible","onOk","onCancel","footer","recorder","window","SpeechRecognition","webkitSpeechRecognition","continous","interimResults","lang","App","state","recordedString","activeInput","isRecording","loading","forceStopped","inputHistory","debugMode","error","_proccessCommand","_onDebugModeChange","setState","prevState","clearFields","currText","replace","length","pop","_stopRecording","input","find","triggers","includes","_findRefInput","current","focus","existingValue","refArray","inputName","props","_startRecording","start","onstart","onresult","event","results","isFinal","string","transcript","onend","onerror","err","stop","inputs","React","createRef","this","span","checked","checkedChildren","unCheckedChildren","message","showIcon","indicator","spin","Component","hot","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.409d2bf2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MakeForm = ({\r\n  fields,\r\n  formData,\r\n  refs,\r\n  _handleChange,\r\n  _setActiveInput,\r\n  _handleSubmit\r\n}) => {\r\n  return (\r\n    <Form>\r\n      {fields.map((each, index) => {\r\n        return (\r\n          <Form.Item key={each.name}>\r\n            <Input\r\n              placeholder={each.placeholder}\r\n              name={each.name}\r\n              ref={refs[index]}\r\n              onChange={_handleChange}\r\n              onFocus={() => _setActiveInput(each.name)}\r\n              onBlur={() => _setActiveInput(null)}\r\n              value={formData[each.name]}\r\n              autoComplete=\"off\"\r\n            />\r\n          </Form.Item>\r\n        );\r\n      })}\r\n      <Form.Item className=\"center\">\r\n        <Button type=\"primary\" onClick={_handleSubmit}>\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nMakeForm.propTypes = {\r\n  fields: PropTypes.arrayOf(PropTypes.object),\r\n  formData: PropTypes.shape({\r\n    first_name: PropTypes.string,\r\n    last_name: PropTypes.string,\r\n    email: PropTypes.string,\r\n    company: PropTypes.string,\r\n    job_title: PropTypes.string\r\n  }),\r\n  refs: PropTypes.arrayOf(PropTypes.object),\r\n  _handleChange: PropTypes.func,\r\n  _setActiveInput: PropTypes.func,\r\n  _handleSubmit: PropTypes.func\r\n};\r\n\r\nMakeForm.defaultProps = {\r\n  fields: [],\r\n  formData: [],\r\n  refs: [],\r\n  _handleChange: () => {},\r\n  _setActiveInput: () => {},\r\n  _handleSubmit: () => {}\r\n};\r\n\r\nexport default MakeForm;\r\n","import React from \"react\";\r\nimport { Table } from \"antd\";\r\nimport { FaMicrophone } from \"react-icons/fa\";\r\n\r\nconst Help = () => {\r\n  const rows = [\r\n    { key: [\"toggle debug\"], desc: \"Turns on/off debug mode\" },\r\n    {\r\n      key: [\"clear\", \"clear input\", \"clear field\", \"start again\"],\r\n      desc: \"Clears currently active input\"\r\n    },\r\n    {\r\n      key: [\"reset\", \"reset form\", \"clear form\"],\r\n      desc: \"Resets the form by clearing all the inputs\"\r\n    },\r\n    {\r\n      key: [\"go\", \"submit\", \"submit form\"],\r\n      desc: \"Submits the form\"\r\n    },\r\n    {\r\n      key: [\"stop recording\", \"stop listening\"],\r\n      desc: \"Stops audio recording\"\r\n    },\r\n    { key: [\"space\"], desc: \"Adds space at the end of active input\" },\r\n    {\r\n      key: [\"undo\"],\r\n      desc: \"Removed recently added string from currently active input\"\r\n    }\r\n  ];\r\n  const dataSource = [];\r\n  rows.forEach((each, index) => {\r\n    dataSource.push({\r\n      key: index,\r\n      command: each.key.map(e => <li key={Math.random()}>- {e}</li>),\r\n      Description: each.desc\r\n    });\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      title: \"command\",\r\n      dataIndex: \"command\",\r\n      key: \"command\",\r\n      width: \"35%\"\r\n    },\r\n    {\r\n      title: \"Description\",\r\n      dataIndex: \"Description\",\r\n      key: \"Description\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"help\" style={{ width: \"90%\" }}>\r\n      <h2>How it works ?</h2>- To start audio input click on{\" \"}\r\n      <FaMicrophone className=\"recordingIcon on\" style={{ fontSize: \"12px\" }} />{\" \"}\r\n      icon.\r\n      <br />- Inputs can be triggered/activated with the help of commands\r\n      mentioned in triggers property in{\" \"}\r\n      <i>\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href=\"https://github.com/amitpatil321/VoiceForm/blob/master/src/form.json\"\r\n        >\r\n          form.json\r\n        </a>\r\n      </i>{\" \"}\r\n      file\r\n      <br />- Apart from input triggers there are few custom commands which are\r\n      as below\r\n      <br />\r\n      <h3>Custom commands</h3>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        size=\"small\"\r\n        pagination={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Help;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FormDetailsModal = ({ showModal, formData, fields, _hideModal }) => {\r\n  return (\r\n    <Modal\r\n      title=\"User Details\"\r\n      visible={showModal}\r\n      onOk={_hideModal}\r\n      onCancel={_hideModal}\r\n      footer={[\r\n        <Button key=\"back\" onClick={_hideModal}>\r\n          Close\r\n        </Button>\r\n      ]}\r\n    >\r\n      <table>\r\n        <tbody>\r\n          {formData &&\r\n            showModal &&\r\n            fields.map(each => {\r\n              return (\r\n                <tr key={each.name}>\r\n                  <td width=\"50%\">{each.placeholder}</td>\r\n                  <td>{`: ${formData[each.name]}`}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nFormDetailsModal.propTypes = {\r\n  showModal: PropTypes.bool,\r\n  fields: PropTypes.arrayOf(PropTypes.object),\r\n  formData: PropTypes.shape({\r\n    first_name: PropTypes.string,\r\n    last_name: PropTypes.string,\r\n    email: PropTypes.string,\r\n    company: PropTypes.string,\r\n    job_title: PropTypes.string\r\n  }),\r\n  _hideModal: PropTypes.func\r\n};\r\n\r\nFormDetailsModal.defaultProps = {\r\n  showModal: false,\r\n  formData: [],\r\n  fields: [],\r\n  _hideModal: () => {}\r\n};\r\n\r\nexport default FormDetailsModal;\r\n","import { hot } from \"react-hot-loader/root\";\r\nimport React, { Component } from \"react\";\r\nimport { Row, Col, Switch, Spin, Icon, Alert } from \"antd\";\r\nimport { FaMicrophone, FaMicrophoneSlash } from \"react-icons/fa\";\r\n\r\nimport { fields } from \"./form.json\";\r\nimport MakeForm from \"./MakeForm/MakeFormView\";\r\nimport Help from \"./Help/Help\";\r\nimport FormDetailsModal from \"./FormDetailsModal/FormDetailsModal\";\r\n\r\nimport \"./App.css\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst recorder = new SpeechRecognition();\r\n\r\nrecorder.continous = true;\r\nrecorder.interimResults = true;\r\nrecorder.lang = \"en-US\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    recordedString: null,\r\n    activeInput: null,\r\n    isRecording: false,\r\n    loading: false,\r\n    forceStopped: false,\r\n    formData: {},\r\n    inputHistory: [],\r\n    refs: [],\r\n    showModal: false,\r\n    debugMode: false,\r\n    error: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    const inputs = {};\r\n    const inputHistory = {};\r\n\r\n    // Initialize inputs array with blank values\r\n    fields.forEach(each => {\r\n      inputs[each.name] = \"\";\r\n      inputHistory[each.name] = \"\";\r\n    });\r\n\r\n    const refs = fields.map(each => React.createRef());\r\n    this.setState({ formData: inputs, inputHistory, refs });\r\n  }\r\n\r\n  _proccessCommand = recordedString => {\r\n    const { activeInput, formData, inputHistory, refs } = this.state;\r\n    // check if command matched with any other custom command\r\n    switch (recordedString) {\r\n      // toggle debug mode on or off\r\n      case \"toggle debug\":\r\n        this._onDebugModeChange();\r\n        break;\r\n      // Appends space at the end of input\r\n      case \"space\":\r\n        if (activeInput) {\r\n          formData[activeInput] = `${formData[activeInput]} `;\r\n          this.setState(prevState => ({\r\n            ...formData,\r\n            inputHistory: {\r\n              ...prevState.inputHistory,\r\n              [activeInput]: [...prevState.inputHistory[activeInput], \" \"]\r\n            }\r\n          }));\r\n        }\r\n        break;\r\n      // Clears currently active input element\r\n      case \"clear\":\r\n      case \"clear input\":\r\n      case \"clear field\":\r\n      case \"start again\":\r\n        if (activeInput) {\r\n          formData[activeInput] = \"\";\r\n          this.setState({ ...formData });\r\n        }\r\n        break;\r\n      // Resets form by clearing all the input fields\r\n      case \"reset\":\r\n      case \"reset form\":\r\n      case \"clear form\": {\r\n        const clearFields = {};\r\n        fields.forEach(each => {\r\n          clearFields[each.name] = \"\";\r\n        });\r\n        this.setState({ formData: clearFields });\r\n        break;\r\n      }\r\n      // Deletes last string added to active input\r\n      case \"undo\":\r\n        if (activeInput) {\r\n          let currText = formData[activeInput];\r\n          if (currText) {\r\n            currText = currText.replace(\r\n              `${\r\n                inputHistory[activeInput][inputHistory[activeInput].length - 1]\r\n              } `,\r\n              \"\"\r\n            );\r\n            formData[activeInput] = currText;\r\n            // set updated input\r\n            this.setState({ ...formData });\r\n            // remove that word from history as well.\r\n            inputHistory[activeInput].pop();\r\n          }\r\n        }\r\n        break;\r\n      // Submits form\r\n      case \"go\":\r\n      case \"submit\":\r\n      case \"submit form\":\r\n        this._handleSubmit();\r\n        break;\r\n      // Stops recording/listening to user commands\r\n      case \"stop recording\":\r\n      case \"stop listening\":\r\n        this._stopRecording();\r\n        break;\r\n      // process text which doesnt match with any other custom commands\r\n      default: {\r\n        // Map command with input triggers if any\r\n        const input = fields.find(each =>\r\n          each.triggers.includes(recordedString)\r\n        );\r\n        if (input) {\r\n          // if any active input is there then fill it with value\r\n          // set input active\r\n          this._findRefInput(refs, input.name).current.focus();\r\n          this.setState({ activeInput: input.name });\r\n        } else if (activeInput) {\r\n          const existingValue = formData[activeInput];\r\n          formData[activeInput] = `${(existingValue || \"\") + recordedString} `;\r\n          this.setState(prevState => ({\r\n            ...formData,\r\n            inputHistory: {\r\n              ...prevState.inputHistory,\r\n              [activeInput]: [\r\n                ...prevState.inputHistory[activeInput],\r\n                recordedString\r\n              ]\r\n            }\r\n          }));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Find referened input\r\n  _findRefInput = (refArray, inputName) =>\r\n    refArray.find(each => each.current.props.name === inputName);\r\n\r\n  // Start audio recording\r\n  _startRecording = () => {\r\n    recorder.start();\r\n    recorder.onstart = () =>\r\n      this.setState({ isRecording: true, forceStopped: false });\r\n    recorder.onresult = event => {\r\n      if (event.results[0].isFinal) {\r\n        const string = event.results[0][0].transcript;\r\n        if (string.length) {\r\n          this.setState({ recordedString: string, loading: true });\r\n          this._proccessCommand(string);\r\n        }\r\n      } else this.setState({ recordedString: null, loading: true });\r\n    };\r\n    // Start listening again on end\r\n    recorder.onend = () => {\r\n      const { forceStopped } = this.state;\r\n      if (!forceStopped) recorder.start();\r\n      this.setState({ isRecording: false, loading: false });\r\n    };\r\n\r\n    // Handle user declined audio permissions error\r\n    recorder.onerror = err => {\r\n      if (err.error === \"not-allowed\")\r\n        this.setState({\r\n          error: \"Please allow Microphone access\"\r\n        });\r\n      else this.setState({ error: \"Unable to start microphone\" });\r\n    };\r\n  };\r\n\r\n  // stop recording\r\n  _stopRecording = () => {\r\n    this.setState(\r\n      {\r\n        activeInput: null,\r\n        isRecording: false,\r\n        forceStopped: true,\r\n        loading: true\r\n      },\r\n      () => recorder.stop()\r\n    );\r\n  };\r\n\r\n  // Handle submit button\r\n  _handleSubmit = e => this.setState({ showModal: true });\r\n\r\n  // Handle input change\r\n  _handleChange = e => {\r\n    const { formData } = this.state;\r\n    this.setState({\r\n      formData: { ...formData, [e.target.name]: e.target.value }\r\n    });\r\n  };\r\n\r\n  // Debug mode change\r\n  _onDebugModeChange = () => {\r\n    const { debugMode } = this.state;\r\n    this.setState({ debugMode: !debugMode });\r\n  };\r\n\r\n  // set currently ative input\r\n  _setActiveInput = activeInput => this.setState({ activeInput });\r\n\r\n  // toggle modal\r\n  _hideModal = () => this.setState({ showModal: false });\r\n\r\n  render() {\r\n    const {\r\n      isRecording,\r\n      refs,\r\n      loading,\r\n      formData,\r\n      showModal,\r\n      debugMode,\r\n      recordedString,\r\n      error\r\n    } = this.state;\r\n    return (\r\n      <Row>\r\n        <Col span={24}>\r\n          <Row>\r\n            <Col span={8} />\r\n            <Col span={8} className=\"content\">\r\n              <div className=\"align-right\">\r\n                Debug Mode{\" \"}\r\n                <Switch\r\n                  checked={!!debugMode}\r\n                  checkedChildren=\"on\"\r\n                  unCheckedChildren=\"off\"\r\n                  onChange={this._onDebugModeChange}\r\n                />\r\n              </div>\r\n              <h2>Registration Form</h2>\r\n              {error && (\r\n                <>\r\n                  <Alert type=\"error\" message={error} showIcon />\r\n                  <br />\r\n                </>\r\n              )}\r\n\r\n              <Row>\r\n                <Col span={24}>\r\n                  <Row>\r\n                    <Col span={2}>\r\n                      {!isRecording ? (\r\n                        <FaMicrophone\r\n                          className=\"recordingIcon on\"\r\n                          onClick={() => this._startRecording()}\r\n                        />\r\n                      ) : (\r\n                        <FaMicrophoneSlash\r\n                          className=\"recordingIcon off\"\r\n                          onClick={() => this._stopRecording()}\r\n                        />\r\n                      )}\r\n                    </Col>\r\n                    <Col span={8} />\r\n                    <Col span={14} className=\"align-right\">\r\n                      {loading && (\r\n                        <Spin\r\n                          indicator={\r\n                            <Icon\r\n                              type=\"loading\"\r\n                              style={{ fontSize: 18 }}\r\n                              spin\r\n                            />\r\n                          }\r\n                        />\r\n                      )}\r\n                      {debugMode && recordedString && (\r\n                        <span className=\"debug\">{recordedString}</span>\r\n                      )}\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n              <MakeForm\r\n                fields={fields}\r\n                formData={formData}\r\n                refs={refs}\r\n                _handleChange={this._handleChange}\r\n                _setActiveInput={this._setActiveInput}\r\n                _handleSubmit={this._handleSubmit}\r\n              />\r\n            </Col>\r\n            <Col span={8}>\r\n              <Help />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <FormDetailsModal\r\n          showModal={showModal}\r\n          formData={formData}\r\n          fields={fields}\r\n          _hideModal={this._hideModal}\r\n        />\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}